// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Your models goes here ...

model UserAuth {
  id            String      @id @default(uuid())
  email         String      @unique
  password      String
  role          Role        @default(USER)
  emailVerified DateTime?
  User          User?
  UserOauth     UserOauth[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum OauthProvider {
  CALENDLY
  GCLOUD
}

model UserOauth {
  id           String        @id @default(uuid())
  userAuthId   String
  UserAuth     UserAuth      @relation(fields: [userAuthId], references: [id])
  provider     OauthProvider
  accessToken  String
  expiresAt    DateTime
  refreshToken String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([userAuthId, provider])
}

enum Role {
  USER
  ADMIN
}

enum SchoolStage {
  ELEMENTARY
  SECONDARY
  HIGH
}

model School {
  id                      String                    @id @default(uuid())
  name                    String
  stage                   SchoolStage
  state                   String
  country                 String
  ContestantParticipation ContestantParticipation[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt

  @@unique([name, stage, state, country])
}

enum ParticipationRole {
  CONTESTANT
  VOLUNTEER
}

model MailingAddress {
  id             String   @id @default(uuid())
  street         String
  externalNumber String
  internalNumber String?
  zipcode        String
  state          String
  country        String
  neighborhood   String
  references     String?
  county         String
  name           String
  phone          String
  User           User[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum ShirtSize {
  XS
  S
  M
  L
  XL
  XXL
}

model User {
  id               String             @id @default(uuid())
  userAuthId       String             @unique
  UserAuth         UserAuth           @relation(fields: [userAuthId], references: [id])
  firstName        String
  lastName         String
  birthDate        DateTime
  governmentId     String
  preferredName    String
  pronouns         String
  shirtSize        ShirtSize
  shirtStyle       String
  MailingAddress   MailingAddress     @relation(fields: [mailingAddressId], references: [id])
  mailingAddressId String             @unique
  Participation    Participation[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Disqualification Disqualification[]
}

model Ofmi {
  id                            String             @id @default(uuid())
  edition                       Int                @unique
  year                          Int
  registrationOpenTime          DateTime
  registrationCloseTime         DateTime
  birthDateRequirement          DateTime?
  highSchoolGraduationDateLimit DateTime?
  Participation                 Participation[]
  OmegaupContest                OmegaupContest[]
  createdAt                     DateTime           @default(now())
  updatedAt                     DateTime           @updatedAt
  Disqualification              Disqualification[]
}

model Participation {
  id                        String                   @id @default(uuid())
  user                      User                     @relation(fields: [userId], references: [id])
  userId                    String
  ofmi                      Ofmi                     @relation(fields: [ofmiId], references: [id])
  ofmiId                    String
  role                      ParticipationRole
  volunteerParticipationId  String?
  VolunteerParticipation    VolunteerParticipation?  @relation(fields: [volunteerParticipationId], references: [id])
  contestantParticipationId String?
  ContestantParticipation   ContestantParticipation? @relation(fields: [contestantParticipationId], references: [id])
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt

  @@unique([userId, ofmiId])
}

model ContestantParticipation {
  id               String             @id @default(uuid())
  schoolId         String
  School           School             @relation(fields: [schoolId], references: [id])
  schoolGrade      Int
  medal            String?
  place            Int?
  omegaupUserId    String?
  omegaupUser      OmegaupUser?       @relation(fields: [omegaupUserId], references: [id])
  problemResults   ProblemResult[]
  Participation    Participation[]
  File             File[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Disqualification Disqualification[]
}

model VolunteerParticipation {
  id                      String          @id @default(uuid())
  educationalLinkageOptIn Boolean
  fundraisingOptIn        Boolean
  communityOptIn          Boolean
  trainerOptIn            Boolean
  problemSetterOptIn      Boolean
  mentorOptIn             Boolean
  Participation           Participation[]
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
}

model ProblemResult {
  omegaupAlias            String                  @id
  score                   Int
  contestantParticipant   ContestantParticipation @relation(fields: [contestantParticipantId], references: [id])
  contestantParticipantId String
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
}

model File {
  id                      String                  @id @default(uuid())
  filename                String
  fileUrl                 String
  contestantParticipant   ContestantParticipation @relation(fields: [contestantParticipantId], references: [id])
  contestantParticipantId String
  contestantComment       String
  fileType                String
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
}

model OmegaupContest {
  omegaupAlias String   @id
  ofmiId       String
  ofmi         Ofmi     @relation(fields: [ofmiId], references: [id])
  name         String
  date         DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model OmegaupUser {
  id                      String                    @id @default(uuid())
  username                String                    @unique
  ContestantParticipation ContestantParticipation[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
}

model Disqualification {
  id                        String                  @id @default(uuid())
  contestantParticipation   ContestantParticipation @relation(fields: [contestantParticipationId], references: [id])
  contestantParticipationId String
  reason                    String
  appealed                  Boolean                 @default(false)
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  User                      User?                   @relation(fields: [userId], references: [id])
  userId                    String?
  Ofmi                      Ofmi?                   @relation(fields: [ofmiId], references: [id])
  ofmiId                    String?
}
